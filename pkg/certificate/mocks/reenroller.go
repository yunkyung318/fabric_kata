// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/pkg/certificate"
	"github.com/IBM-Blockchain/fabric-operator/pkg/initializer/common/config"
)

type Reenroller struct {
	ReenrollStub        func() (*config.Response, error)
	reenrollMutex       sync.RWMutex
	reenrollArgsForCall []struct {
	}
	reenrollReturns struct {
		result1 *config.Response
		result2 error
	}
	reenrollReturnsOnCall map[int]struct {
		result1 *config.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Reenroller) Reenroll() (*config.Response, error) {
	fake.reenrollMutex.Lock()
	ret, specificReturn := fake.reenrollReturnsOnCall[len(fake.reenrollArgsForCall)]
	fake.reenrollArgsForCall = append(fake.reenrollArgsForCall, struct {
	}{})
	fake.recordInvocation("Reenroll", []interface{}{})
	fake.reenrollMutex.Unlock()
	if fake.ReenrollStub != nil {
		return fake.ReenrollStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.reenrollReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Reenroller) ReenrollCallCount() int {
	fake.reenrollMutex.RLock()
	defer fake.reenrollMutex.RUnlock()
	return len(fake.reenrollArgsForCall)
}

func (fake *Reenroller) ReenrollCalls(stub func() (*config.Response, error)) {
	fake.reenrollMutex.Lock()
	defer fake.reenrollMutex.Unlock()
	fake.ReenrollStub = stub
}

func (fake *Reenroller) ReenrollReturns(result1 *config.Response, result2 error) {
	fake.reenrollMutex.Lock()
	defer fake.reenrollMutex.Unlock()
	fake.ReenrollStub = nil
	fake.reenrollReturns = struct {
		result1 *config.Response
		result2 error
	}{result1, result2}
}

func (fake *Reenroller) ReenrollReturnsOnCall(i int, result1 *config.Response, result2 error) {
	fake.reenrollMutex.Lock()
	defer fake.reenrollMutex.Unlock()
	fake.ReenrollStub = nil
	if fake.reenrollReturnsOnCall == nil {
		fake.reenrollReturnsOnCall = make(map[int]struct {
			result1 *config.Response
			result2 error
		})
	}
	fake.reenrollReturnsOnCall[i] = struct {
		result1 *config.Response
		result2 error
	}{result1, result2}
}

func (fake *Reenroller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reenrollMutex.RLock()
	defer fake.reenrollMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Reenroller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ certificate.Reenroller = new(Reenroller)
