// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/pkg/action"
	"github.com/IBM-Blockchain/fabric-operator/pkg/initializer/common"
	"k8s.io/apimachinery/pkg/runtime"
)

type Reenroller struct {
	RenewCertStub        func(common.SecretType, runtime.Object, bool) error
	renewCertMutex       sync.RWMutex
	renewCertArgsForCall []struct {
		arg1 common.SecretType
		arg2 runtime.Object
		arg3 bool
	}
	renewCertReturns struct {
		result1 error
	}
	renewCertReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Reenroller) RenewCert(arg1 common.SecretType, arg2 runtime.Object, arg3 bool) error {
	fake.renewCertMutex.Lock()
	ret, specificReturn := fake.renewCertReturnsOnCall[len(fake.renewCertArgsForCall)]
	fake.renewCertArgsForCall = append(fake.renewCertArgsForCall, struct {
		arg1 common.SecretType
		arg2 runtime.Object
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("RenewCert", []interface{}{arg1, arg2, arg3})
	fake.renewCertMutex.Unlock()
	if fake.RenewCertStub != nil {
		return fake.RenewCertStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.renewCertReturns
	return fakeReturns.result1
}

func (fake *Reenroller) RenewCertCallCount() int {
	fake.renewCertMutex.RLock()
	defer fake.renewCertMutex.RUnlock()
	return len(fake.renewCertArgsForCall)
}

func (fake *Reenroller) RenewCertCalls(stub func(common.SecretType, runtime.Object, bool) error) {
	fake.renewCertMutex.Lock()
	defer fake.renewCertMutex.Unlock()
	fake.RenewCertStub = stub
}

func (fake *Reenroller) RenewCertArgsForCall(i int) (common.SecretType, runtime.Object, bool) {
	fake.renewCertMutex.RLock()
	defer fake.renewCertMutex.RUnlock()
	argsForCall := fake.renewCertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Reenroller) RenewCertReturns(result1 error) {
	fake.renewCertMutex.Lock()
	defer fake.renewCertMutex.Unlock()
	fake.RenewCertStub = nil
	fake.renewCertReturns = struct {
		result1 error
	}{result1}
}

func (fake *Reenroller) RenewCertReturnsOnCall(i int, result1 error) {
	fake.renewCertMutex.Lock()
	defer fake.renewCertMutex.Unlock()
	fake.RenewCertStub = nil
	if fake.renewCertReturnsOnCall == nil {
		fake.renewCertReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renewCertReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Reenroller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.renewCertMutex.RLock()
	defer fake.renewCertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Reenroller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ action.Reenroller = new(Reenroller)
