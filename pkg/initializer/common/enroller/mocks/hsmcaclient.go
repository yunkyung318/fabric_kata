// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	"time"

	"github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	"github.com/IBM-Blockchain/fabric-operator/pkg/initializer/common/enroller"
	"github.com/hyperledger/fabric-ca/lib"
)

type HSMCAClient struct {
	GetConfigStub        func() *lib.ClientConfig
	getConfigMutex       sync.RWMutex
	getConfigArgsForCall []struct {
	}
	getConfigReturns struct {
		result1 *lib.ClientConfig
	}
	getConfigReturnsOnCall map[int]struct {
		result1 *lib.ClientConfig
	}
	GetEnrollmentRequestStub        func() *v1beta1.Enrollment
	getEnrollmentRequestMutex       sync.RWMutex
	getEnrollmentRequestArgsForCall []struct {
	}
	getEnrollmentRequestReturns struct {
		result1 *v1beta1.Enrollment
	}
	getEnrollmentRequestReturnsOnCall map[int]struct {
		result1 *v1beta1.Enrollment
	}
	GetHomeDirStub        func() string
	getHomeDirMutex       sync.RWMutex
	getHomeDirArgsForCall []struct {
	}
	getHomeDirReturns struct {
		result1 string
	}
	getHomeDirReturnsOnCall map[int]struct {
		result1 string
	}
	PingCAStub        func(time.Duration) error
	pingCAMutex       sync.RWMutex
	pingCAArgsForCall []struct {
		arg1 time.Duration
	}
	pingCAReturns struct {
		result1 error
	}
	pingCAReturnsOnCall map[int]struct {
		result1 error
	}
	SetHSMLibraryStub        func(string)
	setHSMLibraryMutex       sync.RWMutex
	setHSMLibraryArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HSMCAClient) GetConfig() *lib.ClientConfig {
	fake.getConfigMutex.Lock()
	ret, specificReturn := fake.getConfigReturnsOnCall[len(fake.getConfigArgsForCall)]
	fake.getConfigArgsForCall = append(fake.getConfigArgsForCall, struct {
	}{})
	fake.recordInvocation("GetConfig", []interface{}{})
	fake.getConfigMutex.Unlock()
	if fake.GetConfigStub != nil {
		return fake.GetConfigStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getConfigReturns
	return fakeReturns.result1
}

func (fake *HSMCAClient) GetConfigCallCount() int {
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	return len(fake.getConfigArgsForCall)
}

func (fake *HSMCAClient) GetConfigCalls(stub func() *lib.ClientConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = stub
}

func (fake *HSMCAClient) GetConfigReturns(result1 *lib.ClientConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = nil
	fake.getConfigReturns = struct {
		result1 *lib.ClientConfig
	}{result1}
}

func (fake *HSMCAClient) GetConfigReturnsOnCall(i int, result1 *lib.ClientConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = nil
	if fake.getConfigReturnsOnCall == nil {
		fake.getConfigReturnsOnCall = make(map[int]struct {
			result1 *lib.ClientConfig
		})
	}
	fake.getConfigReturnsOnCall[i] = struct {
		result1 *lib.ClientConfig
	}{result1}
}

func (fake *HSMCAClient) GetEnrollmentRequest() *v1beta1.Enrollment {
	fake.getEnrollmentRequestMutex.Lock()
	ret, specificReturn := fake.getEnrollmentRequestReturnsOnCall[len(fake.getEnrollmentRequestArgsForCall)]
	fake.getEnrollmentRequestArgsForCall = append(fake.getEnrollmentRequestArgsForCall, struct {
	}{})
	fake.recordInvocation("GetEnrollmentRequest", []interface{}{})
	fake.getEnrollmentRequestMutex.Unlock()
	if fake.GetEnrollmentRequestStub != nil {
		return fake.GetEnrollmentRequestStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getEnrollmentRequestReturns
	return fakeReturns.result1
}

func (fake *HSMCAClient) GetEnrollmentRequestCallCount() int {
	fake.getEnrollmentRequestMutex.RLock()
	defer fake.getEnrollmentRequestMutex.RUnlock()
	return len(fake.getEnrollmentRequestArgsForCall)
}

func (fake *HSMCAClient) GetEnrollmentRequestCalls(stub func() *v1beta1.Enrollment) {
	fake.getEnrollmentRequestMutex.Lock()
	defer fake.getEnrollmentRequestMutex.Unlock()
	fake.GetEnrollmentRequestStub = stub
}

func (fake *HSMCAClient) GetEnrollmentRequestReturns(result1 *v1beta1.Enrollment) {
	fake.getEnrollmentRequestMutex.Lock()
	defer fake.getEnrollmentRequestMutex.Unlock()
	fake.GetEnrollmentRequestStub = nil
	fake.getEnrollmentRequestReturns = struct {
		result1 *v1beta1.Enrollment
	}{result1}
}

func (fake *HSMCAClient) GetEnrollmentRequestReturnsOnCall(i int, result1 *v1beta1.Enrollment) {
	fake.getEnrollmentRequestMutex.Lock()
	defer fake.getEnrollmentRequestMutex.Unlock()
	fake.GetEnrollmentRequestStub = nil
	if fake.getEnrollmentRequestReturnsOnCall == nil {
		fake.getEnrollmentRequestReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.Enrollment
		})
	}
	fake.getEnrollmentRequestReturnsOnCall[i] = struct {
		result1 *v1beta1.Enrollment
	}{result1}
}

func (fake *HSMCAClient) GetHomeDir() string {
	fake.getHomeDirMutex.Lock()
	ret, specificReturn := fake.getHomeDirReturnsOnCall[len(fake.getHomeDirArgsForCall)]
	fake.getHomeDirArgsForCall = append(fake.getHomeDirArgsForCall, struct {
	}{})
	fake.recordInvocation("GetHomeDir", []interface{}{})
	fake.getHomeDirMutex.Unlock()
	if fake.GetHomeDirStub != nil {
		return fake.GetHomeDirStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getHomeDirReturns
	return fakeReturns.result1
}

func (fake *HSMCAClient) GetHomeDirCallCount() int {
	fake.getHomeDirMutex.RLock()
	defer fake.getHomeDirMutex.RUnlock()
	return len(fake.getHomeDirArgsForCall)
}

func (fake *HSMCAClient) GetHomeDirCalls(stub func() string) {
	fake.getHomeDirMutex.Lock()
	defer fake.getHomeDirMutex.Unlock()
	fake.GetHomeDirStub = stub
}

func (fake *HSMCAClient) GetHomeDirReturns(result1 string) {
	fake.getHomeDirMutex.Lock()
	defer fake.getHomeDirMutex.Unlock()
	fake.GetHomeDirStub = nil
	fake.getHomeDirReturns = struct {
		result1 string
	}{result1}
}

func (fake *HSMCAClient) GetHomeDirReturnsOnCall(i int, result1 string) {
	fake.getHomeDirMutex.Lock()
	defer fake.getHomeDirMutex.Unlock()
	fake.GetHomeDirStub = nil
	if fake.getHomeDirReturnsOnCall == nil {
		fake.getHomeDirReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getHomeDirReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *HSMCAClient) PingCA(arg1 time.Duration) error {
	fake.pingCAMutex.Lock()
	ret, specificReturn := fake.pingCAReturnsOnCall[len(fake.pingCAArgsForCall)]
	fake.pingCAArgsForCall = append(fake.pingCAArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	fake.recordInvocation("PingCA", []interface{}{arg1})
	fake.pingCAMutex.Unlock()
	if fake.PingCAStub != nil {
		return fake.PingCAStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pingCAReturns
	return fakeReturns.result1
}

func (fake *HSMCAClient) PingCACallCount() int {
	fake.pingCAMutex.RLock()
	defer fake.pingCAMutex.RUnlock()
	return len(fake.pingCAArgsForCall)
}

func (fake *HSMCAClient) PingCACalls(stub func(time.Duration) error) {
	fake.pingCAMutex.Lock()
	defer fake.pingCAMutex.Unlock()
	fake.PingCAStub = stub
}

func (fake *HSMCAClient) PingCAArgsForCall(i int) time.Duration {
	fake.pingCAMutex.RLock()
	defer fake.pingCAMutex.RUnlock()
	argsForCall := fake.pingCAArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HSMCAClient) PingCAReturns(result1 error) {
	fake.pingCAMutex.Lock()
	defer fake.pingCAMutex.Unlock()
	fake.PingCAStub = nil
	fake.pingCAReturns = struct {
		result1 error
	}{result1}
}

func (fake *HSMCAClient) PingCAReturnsOnCall(i int, result1 error) {
	fake.pingCAMutex.Lock()
	defer fake.pingCAMutex.Unlock()
	fake.PingCAStub = nil
	if fake.pingCAReturnsOnCall == nil {
		fake.pingCAReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pingCAReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *HSMCAClient) SetHSMLibrary(arg1 string) {
	fake.setHSMLibraryMutex.Lock()
	fake.setHSMLibraryArgsForCall = append(fake.setHSMLibraryArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetHSMLibrary", []interface{}{arg1})
	fake.setHSMLibraryMutex.Unlock()
	if fake.SetHSMLibraryStub != nil {
		fake.SetHSMLibraryStub(arg1)
	}
}

func (fake *HSMCAClient) SetHSMLibraryCallCount() int {
	fake.setHSMLibraryMutex.RLock()
	defer fake.setHSMLibraryMutex.RUnlock()
	return len(fake.setHSMLibraryArgsForCall)
}

func (fake *HSMCAClient) SetHSMLibraryCalls(stub func(string)) {
	fake.setHSMLibraryMutex.Lock()
	defer fake.setHSMLibraryMutex.Unlock()
	fake.SetHSMLibraryStub = stub
}

func (fake *HSMCAClient) SetHSMLibraryArgsForCall(i int) string {
	fake.setHSMLibraryMutex.RLock()
	defer fake.setHSMLibraryMutex.RUnlock()
	argsForCall := fake.setHSMLibraryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HSMCAClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	fake.getEnrollmentRequestMutex.RLock()
	defer fake.getEnrollmentRequestMutex.RUnlock()
	fake.getHomeDirMutex.RLock()
	defer fake.getHomeDirMutex.RUnlock()
	fake.pingCAMutex.RLock()
	defer fake.pingCAMutex.RUnlock()
	fake.setHSMLibraryMutex.RLock()
	defer fake.setHSMLibraryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HSMCAClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ enroller.HSMCAClient = new(HSMCAClient)
