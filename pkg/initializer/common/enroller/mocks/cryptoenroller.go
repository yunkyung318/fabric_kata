// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	"time"

	"github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	"github.com/IBM-Blockchain/fabric-operator/pkg/initializer/common/config"
	"github.com/IBM-Blockchain/fabric-operator/pkg/initializer/common/enroller"
)

type CryptoEnroller struct {
	EnrollStub        func() (*config.Response, error)
	enrollMutex       sync.RWMutex
	enrollArgsForCall []struct {
	}
	enrollReturns struct {
		result1 *config.Response
		result2 error
	}
	enrollReturnsOnCall map[int]struct {
		result1 *config.Response
		result2 error
	}
	GetEnrollmentRequestStub        func() *v1beta1.Enrollment
	getEnrollmentRequestMutex       sync.RWMutex
	getEnrollmentRequestArgsForCall []struct {
	}
	getEnrollmentRequestReturns struct {
		result1 *v1beta1.Enrollment
	}
	getEnrollmentRequestReturnsOnCall map[int]struct {
		result1 *v1beta1.Enrollment
	}
	PingCAStub        func(time.Duration) error
	pingCAMutex       sync.RWMutex
	pingCAArgsForCall []struct {
		arg1 time.Duration
	}
	pingCAReturns struct {
		result1 error
	}
	pingCAReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CryptoEnroller) Enroll() (*config.Response, error) {
	fake.enrollMutex.Lock()
	ret, specificReturn := fake.enrollReturnsOnCall[len(fake.enrollArgsForCall)]
	fake.enrollArgsForCall = append(fake.enrollArgsForCall, struct {
	}{})
	fake.recordInvocation("Enroll", []interface{}{})
	fake.enrollMutex.Unlock()
	if fake.EnrollStub != nil {
		return fake.EnrollStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enrollReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CryptoEnroller) EnrollCallCount() int {
	fake.enrollMutex.RLock()
	defer fake.enrollMutex.RUnlock()
	return len(fake.enrollArgsForCall)
}

func (fake *CryptoEnroller) EnrollCalls(stub func() (*config.Response, error)) {
	fake.enrollMutex.Lock()
	defer fake.enrollMutex.Unlock()
	fake.EnrollStub = stub
}

func (fake *CryptoEnroller) EnrollReturns(result1 *config.Response, result2 error) {
	fake.enrollMutex.Lock()
	defer fake.enrollMutex.Unlock()
	fake.EnrollStub = nil
	fake.enrollReturns = struct {
		result1 *config.Response
		result2 error
	}{result1, result2}
}

func (fake *CryptoEnroller) EnrollReturnsOnCall(i int, result1 *config.Response, result2 error) {
	fake.enrollMutex.Lock()
	defer fake.enrollMutex.Unlock()
	fake.EnrollStub = nil
	if fake.enrollReturnsOnCall == nil {
		fake.enrollReturnsOnCall = make(map[int]struct {
			result1 *config.Response
			result2 error
		})
	}
	fake.enrollReturnsOnCall[i] = struct {
		result1 *config.Response
		result2 error
	}{result1, result2}
}

func (fake *CryptoEnroller) GetEnrollmentRequest() *v1beta1.Enrollment {
	fake.getEnrollmentRequestMutex.Lock()
	ret, specificReturn := fake.getEnrollmentRequestReturnsOnCall[len(fake.getEnrollmentRequestArgsForCall)]
	fake.getEnrollmentRequestArgsForCall = append(fake.getEnrollmentRequestArgsForCall, struct {
	}{})
	fake.recordInvocation("GetEnrollmentRequest", []interface{}{})
	fake.getEnrollmentRequestMutex.Unlock()
	if fake.GetEnrollmentRequestStub != nil {
		return fake.GetEnrollmentRequestStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getEnrollmentRequestReturns
	return fakeReturns.result1
}

func (fake *CryptoEnroller) GetEnrollmentRequestCallCount() int {
	fake.getEnrollmentRequestMutex.RLock()
	defer fake.getEnrollmentRequestMutex.RUnlock()
	return len(fake.getEnrollmentRequestArgsForCall)
}

func (fake *CryptoEnroller) GetEnrollmentRequestCalls(stub func() *v1beta1.Enrollment) {
	fake.getEnrollmentRequestMutex.Lock()
	defer fake.getEnrollmentRequestMutex.Unlock()
	fake.GetEnrollmentRequestStub = stub
}

func (fake *CryptoEnroller) GetEnrollmentRequestReturns(result1 *v1beta1.Enrollment) {
	fake.getEnrollmentRequestMutex.Lock()
	defer fake.getEnrollmentRequestMutex.Unlock()
	fake.GetEnrollmentRequestStub = nil
	fake.getEnrollmentRequestReturns = struct {
		result1 *v1beta1.Enrollment
	}{result1}
}

func (fake *CryptoEnroller) GetEnrollmentRequestReturnsOnCall(i int, result1 *v1beta1.Enrollment) {
	fake.getEnrollmentRequestMutex.Lock()
	defer fake.getEnrollmentRequestMutex.Unlock()
	fake.GetEnrollmentRequestStub = nil
	if fake.getEnrollmentRequestReturnsOnCall == nil {
		fake.getEnrollmentRequestReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.Enrollment
		})
	}
	fake.getEnrollmentRequestReturnsOnCall[i] = struct {
		result1 *v1beta1.Enrollment
	}{result1}
}

func (fake *CryptoEnroller) PingCA(arg1 time.Duration) error {
	fake.pingCAMutex.Lock()
	ret, specificReturn := fake.pingCAReturnsOnCall[len(fake.pingCAArgsForCall)]
	fake.pingCAArgsForCall = append(fake.pingCAArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	fake.recordInvocation("PingCA", []interface{}{arg1})
	fake.pingCAMutex.Unlock()
	if fake.PingCAStub != nil {
		return fake.PingCAStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pingCAReturns
	return fakeReturns.result1
}

func (fake *CryptoEnroller) PingCACallCount() int {
	fake.pingCAMutex.RLock()
	defer fake.pingCAMutex.RUnlock()
	return len(fake.pingCAArgsForCall)
}

func (fake *CryptoEnroller) PingCACalls(stub func(time.Duration) error) {
	fake.pingCAMutex.Lock()
	defer fake.pingCAMutex.Unlock()
	fake.PingCAStub = stub
}

func (fake *CryptoEnroller) PingCAArgsForCall(i int) time.Duration {
	fake.pingCAMutex.RLock()
	defer fake.pingCAMutex.RUnlock()
	argsForCall := fake.pingCAArgsForCall[i]
	return argsForCall.arg1
}

func (fake *CryptoEnroller) PingCAReturns(result1 error) {
	fake.pingCAMutex.Lock()
	defer fake.pingCAMutex.Unlock()
	fake.PingCAStub = nil
	fake.pingCAReturns = struct {
		result1 error
	}{result1}
}

func (fake *CryptoEnroller) PingCAReturnsOnCall(i int, result1 error) {
	fake.pingCAMutex.Lock()
	defer fake.pingCAMutex.Unlock()
	fake.PingCAStub = nil
	if fake.pingCAReturnsOnCall == nil {
		fake.pingCAReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pingCAReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CryptoEnroller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enrollMutex.RLock()
	defer fake.enrollMutex.RUnlock()
	fake.getEnrollmentRequestMutex.RLock()
	defer fake.getEnrollmentRequestMutex.RUnlock()
	fake.pingCAMutex.RLock()
	defer fake.pingCAMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CryptoEnroller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ enroller.CryptoEnroller = new(CryptoEnroller)
