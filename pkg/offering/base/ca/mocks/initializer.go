// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	v1 "github.com/IBM-Blockchain/fabric-operator/pkg/apis/ca/v1"
	initializer "github.com/IBM-Blockchain/fabric-operator/pkg/initializer/ca"
	baseca "github.com/IBM-Blockchain/fabric-operator/pkg/offering/base/ca"
)

type Initializer struct {
	CreateStub        func(*v1beta1.IBPCA, *v1.ServerConfig, initializer.IBPCA) (*initializer.Response, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 *v1beta1.IBPCA
		arg2 *v1.ServerConfig
		arg3 initializer.IBPCA
	}
	createReturns struct {
		result1 *initializer.Response
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *initializer.Response
		result2 error
	}
	UpdateStub        func(*v1beta1.IBPCA, *v1.ServerConfig, initializer.IBPCA) (*initializer.Response, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 *v1beta1.IBPCA
		arg2 *v1.ServerConfig
		arg3 initializer.IBPCA
	}
	updateReturns struct {
		result1 *initializer.Response
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *initializer.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Initializer) Create(arg1 *v1beta1.IBPCA, arg2 *v1.ServerConfig, arg3 initializer.IBPCA) (*initializer.Response, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 *v1beta1.IBPCA
		arg2 *v1.ServerConfig
		arg3 initializer.IBPCA
	}{arg1, arg2, arg3})
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Initializer) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *Initializer) CreateCalls(stub func(*v1beta1.IBPCA, *v1.ServerConfig, initializer.IBPCA) (*initializer.Response, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *Initializer) CreateArgsForCall(i int) (*v1beta1.IBPCA, *v1.ServerConfig, initializer.IBPCA) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Initializer) CreateReturns(result1 *initializer.Response, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *initializer.Response
		result2 error
	}{result1, result2}
}

func (fake *Initializer) CreateReturnsOnCall(i int, result1 *initializer.Response, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *initializer.Response
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *initializer.Response
		result2 error
	}{result1, result2}
}

func (fake *Initializer) Update(arg1 *v1beta1.IBPCA, arg2 *v1.ServerConfig, arg3 initializer.IBPCA) (*initializer.Response, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 *v1beta1.IBPCA
		arg2 *v1.ServerConfig
		arg3 initializer.IBPCA
	}{arg1, arg2, arg3})
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Initializer) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *Initializer) UpdateCalls(stub func(*v1beta1.IBPCA, *v1.ServerConfig, initializer.IBPCA) (*initializer.Response, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *Initializer) UpdateArgsForCall(i int) (*v1beta1.IBPCA, *v1.ServerConfig, initializer.IBPCA) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Initializer) UpdateReturns(result1 *initializer.Response, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *initializer.Response
		result2 error
	}{result1, result2}
}

func (fake *Initializer) UpdateReturnsOnCall(i int, result1 *initializer.Response, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *initializer.Response
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *initializer.Response
		result2 error
	}{result1, result2}
}

func (fake *Initializer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Initializer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ baseca.Initializer = new(Initializer)
