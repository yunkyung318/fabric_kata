// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	initializer "github.com/IBM-Blockchain/fabric-operator/pkg/initializer/ca"
	baseca "github.com/IBM-Blockchain/fabric-operator/pkg/offering/base/ca"
	v1 "k8s.io/api/core/v1"
)

type InitializeIBPCA struct {
	CreateOrUpdateConfigMapStub        func(*v1beta1.IBPCA, map[string][]byte, string) error
	createOrUpdateConfigMapMutex       sync.RWMutex
	createOrUpdateConfigMapArgsForCall []struct {
		arg1 *v1beta1.IBPCA
		arg2 map[string][]byte
		arg3 string
	}
	createOrUpdateConfigMapReturns struct {
		result1 error
	}
	createOrUpdateConfigMapReturnsOnCall map[int]struct {
		result1 error
	}
	HandleConfigResourcesStub        func(string, *v1beta1.IBPCA, *initializer.Response, baseca.Update) error
	handleConfigResourcesMutex       sync.RWMutex
	handleConfigResourcesArgsForCall []struct {
		arg1 string
		arg2 *v1beta1.IBPCA
		arg3 *initializer.Response
		arg4 baseca.Update
	}
	handleConfigResourcesReturns struct {
		result1 error
	}
	handleConfigResourcesReturnsOnCall map[int]struct {
		result1 error
	}
	HandleEnrollmentCAInitStub        func(*v1beta1.IBPCA, baseca.Update) (*initializer.Response, error)
	handleEnrollmentCAInitMutex       sync.RWMutex
	handleEnrollmentCAInitArgsForCall []struct {
		arg1 *v1beta1.IBPCA
		arg2 baseca.Update
	}
	handleEnrollmentCAInitReturns struct {
		result1 *initializer.Response
		result2 error
	}
	handleEnrollmentCAInitReturnsOnCall map[int]struct {
		result1 *initializer.Response
		result2 error
	}
	HandleTLSCAInitStub        func(*v1beta1.IBPCA, baseca.Update) (*initializer.Response, error)
	handleTLSCAInitMutex       sync.RWMutex
	handleTLSCAInitArgsForCall []struct {
		arg1 *v1beta1.IBPCA
		arg2 baseca.Update
	}
	handleTLSCAInitReturns struct {
		result1 *initializer.Response
		result2 error
	}
	handleTLSCAInitReturnsOnCall map[int]struct {
		result1 *initializer.Response
		result2 error
	}
	ReadConfigMapStub        func(*v1beta1.IBPCA, string) (*v1.ConfigMap, error)
	readConfigMapMutex       sync.RWMutex
	readConfigMapArgsForCall []struct {
		arg1 *v1beta1.IBPCA
		arg2 string
	}
	readConfigMapReturns struct {
		result1 *v1.ConfigMap
		result2 error
	}
	readConfigMapReturnsOnCall map[int]struct {
		result1 *v1.ConfigMap
		result2 error
	}
	SyncDBConfigStub        func(*v1beta1.IBPCA) (*v1beta1.IBPCA, error)
	syncDBConfigMutex       sync.RWMutex
	syncDBConfigArgsForCall []struct {
		arg1 *v1beta1.IBPCA
	}
	syncDBConfigReturns struct {
		result1 *v1beta1.IBPCA
		result2 error
	}
	syncDBConfigReturnsOnCall map[int]struct {
		result1 *v1beta1.IBPCA
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *InitializeIBPCA) CreateOrUpdateConfigMap(arg1 *v1beta1.IBPCA, arg2 map[string][]byte, arg3 string) error {
	fake.createOrUpdateConfigMapMutex.Lock()
	ret, specificReturn := fake.createOrUpdateConfigMapReturnsOnCall[len(fake.createOrUpdateConfigMapArgsForCall)]
	fake.createOrUpdateConfigMapArgsForCall = append(fake.createOrUpdateConfigMapArgsForCall, struct {
		arg1 *v1beta1.IBPCA
		arg2 map[string][]byte
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateOrUpdateConfigMap", []interface{}{arg1, arg2, arg3})
	fake.createOrUpdateConfigMapMutex.Unlock()
	if fake.CreateOrUpdateConfigMapStub != nil {
		return fake.CreateOrUpdateConfigMapStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createOrUpdateConfigMapReturns
	return fakeReturns.result1
}

func (fake *InitializeIBPCA) CreateOrUpdateConfigMapCallCount() int {
	fake.createOrUpdateConfigMapMutex.RLock()
	defer fake.createOrUpdateConfigMapMutex.RUnlock()
	return len(fake.createOrUpdateConfigMapArgsForCall)
}

func (fake *InitializeIBPCA) CreateOrUpdateConfigMapCalls(stub func(*v1beta1.IBPCA, map[string][]byte, string) error) {
	fake.createOrUpdateConfigMapMutex.Lock()
	defer fake.createOrUpdateConfigMapMutex.Unlock()
	fake.CreateOrUpdateConfigMapStub = stub
}

func (fake *InitializeIBPCA) CreateOrUpdateConfigMapArgsForCall(i int) (*v1beta1.IBPCA, map[string][]byte, string) {
	fake.createOrUpdateConfigMapMutex.RLock()
	defer fake.createOrUpdateConfigMapMutex.RUnlock()
	argsForCall := fake.createOrUpdateConfigMapArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *InitializeIBPCA) CreateOrUpdateConfigMapReturns(result1 error) {
	fake.createOrUpdateConfigMapMutex.Lock()
	defer fake.createOrUpdateConfigMapMutex.Unlock()
	fake.CreateOrUpdateConfigMapStub = nil
	fake.createOrUpdateConfigMapReturns = struct {
		result1 error
	}{result1}
}

func (fake *InitializeIBPCA) CreateOrUpdateConfigMapReturnsOnCall(i int, result1 error) {
	fake.createOrUpdateConfigMapMutex.Lock()
	defer fake.createOrUpdateConfigMapMutex.Unlock()
	fake.CreateOrUpdateConfigMapStub = nil
	if fake.createOrUpdateConfigMapReturnsOnCall == nil {
		fake.createOrUpdateConfigMapReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createOrUpdateConfigMapReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *InitializeIBPCA) HandleConfigResources(arg1 string, arg2 *v1beta1.IBPCA, arg3 *initializer.Response, arg4 baseca.Update) error {
	fake.handleConfigResourcesMutex.Lock()
	ret, specificReturn := fake.handleConfigResourcesReturnsOnCall[len(fake.handleConfigResourcesArgsForCall)]
	fake.handleConfigResourcesArgsForCall = append(fake.handleConfigResourcesArgsForCall, struct {
		arg1 string
		arg2 *v1beta1.IBPCA
		arg3 *initializer.Response
		arg4 baseca.Update
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("HandleConfigResources", []interface{}{arg1, arg2, arg3, arg4})
	fake.handleConfigResourcesMutex.Unlock()
	if fake.HandleConfigResourcesStub != nil {
		return fake.HandleConfigResourcesStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.handleConfigResourcesReturns
	return fakeReturns.result1
}

func (fake *InitializeIBPCA) HandleConfigResourcesCallCount() int {
	fake.handleConfigResourcesMutex.RLock()
	defer fake.handleConfigResourcesMutex.RUnlock()
	return len(fake.handleConfigResourcesArgsForCall)
}

func (fake *InitializeIBPCA) HandleConfigResourcesCalls(stub func(string, *v1beta1.IBPCA, *initializer.Response, baseca.Update) error) {
	fake.handleConfigResourcesMutex.Lock()
	defer fake.handleConfigResourcesMutex.Unlock()
	fake.HandleConfigResourcesStub = stub
}

func (fake *InitializeIBPCA) HandleConfigResourcesArgsForCall(i int) (string, *v1beta1.IBPCA, *initializer.Response, baseca.Update) {
	fake.handleConfigResourcesMutex.RLock()
	defer fake.handleConfigResourcesMutex.RUnlock()
	argsForCall := fake.handleConfigResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *InitializeIBPCA) HandleConfigResourcesReturns(result1 error) {
	fake.handleConfigResourcesMutex.Lock()
	defer fake.handleConfigResourcesMutex.Unlock()
	fake.HandleConfigResourcesStub = nil
	fake.handleConfigResourcesReturns = struct {
		result1 error
	}{result1}
}

func (fake *InitializeIBPCA) HandleConfigResourcesReturnsOnCall(i int, result1 error) {
	fake.handleConfigResourcesMutex.Lock()
	defer fake.handleConfigResourcesMutex.Unlock()
	fake.HandleConfigResourcesStub = nil
	if fake.handleConfigResourcesReturnsOnCall == nil {
		fake.handleConfigResourcesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleConfigResourcesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *InitializeIBPCA) HandleEnrollmentCAInit(arg1 *v1beta1.IBPCA, arg2 baseca.Update) (*initializer.Response, error) {
	fake.handleEnrollmentCAInitMutex.Lock()
	ret, specificReturn := fake.handleEnrollmentCAInitReturnsOnCall[len(fake.handleEnrollmentCAInitArgsForCall)]
	fake.handleEnrollmentCAInitArgsForCall = append(fake.handleEnrollmentCAInitArgsForCall, struct {
		arg1 *v1beta1.IBPCA
		arg2 baseca.Update
	}{arg1, arg2})
	fake.recordInvocation("HandleEnrollmentCAInit", []interface{}{arg1, arg2})
	fake.handleEnrollmentCAInitMutex.Unlock()
	if fake.HandleEnrollmentCAInitStub != nil {
		return fake.HandleEnrollmentCAInitStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.handleEnrollmentCAInitReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *InitializeIBPCA) HandleEnrollmentCAInitCallCount() int {
	fake.handleEnrollmentCAInitMutex.RLock()
	defer fake.handleEnrollmentCAInitMutex.RUnlock()
	return len(fake.handleEnrollmentCAInitArgsForCall)
}

func (fake *InitializeIBPCA) HandleEnrollmentCAInitCalls(stub func(*v1beta1.IBPCA, baseca.Update) (*initializer.Response, error)) {
	fake.handleEnrollmentCAInitMutex.Lock()
	defer fake.handleEnrollmentCAInitMutex.Unlock()
	fake.HandleEnrollmentCAInitStub = stub
}

func (fake *InitializeIBPCA) HandleEnrollmentCAInitArgsForCall(i int) (*v1beta1.IBPCA, baseca.Update) {
	fake.handleEnrollmentCAInitMutex.RLock()
	defer fake.handleEnrollmentCAInitMutex.RUnlock()
	argsForCall := fake.handleEnrollmentCAInitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *InitializeIBPCA) HandleEnrollmentCAInitReturns(result1 *initializer.Response, result2 error) {
	fake.handleEnrollmentCAInitMutex.Lock()
	defer fake.handleEnrollmentCAInitMutex.Unlock()
	fake.HandleEnrollmentCAInitStub = nil
	fake.handleEnrollmentCAInitReturns = struct {
		result1 *initializer.Response
		result2 error
	}{result1, result2}
}

func (fake *InitializeIBPCA) HandleEnrollmentCAInitReturnsOnCall(i int, result1 *initializer.Response, result2 error) {
	fake.handleEnrollmentCAInitMutex.Lock()
	defer fake.handleEnrollmentCAInitMutex.Unlock()
	fake.HandleEnrollmentCAInitStub = nil
	if fake.handleEnrollmentCAInitReturnsOnCall == nil {
		fake.handleEnrollmentCAInitReturnsOnCall = make(map[int]struct {
			result1 *initializer.Response
			result2 error
		})
	}
	fake.handleEnrollmentCAInitReturnsOnCall[i] = struct {
		result1 *initializer.Response
		result2 error
	}{result1, result2}
}

func (fake *InitializeIBPCA) HandleTLSCAInit(arg1 *v1beta1.IBPCA, arg2 baseca.Update) (*initializer.Response, error) {
	fake.handleTLSCAInitMutex.Lock()
	ret, specificReturn := fake.handleTLSCAInitReturnsOnCall[len(fake.handleTLSCAInitArgsForCall)]
	fake.handleTLSCAInitArgsForCall = append(fake.handleTLSCAInitArgsForCall, struct {
		arg1 *v1beta1.IBPCA
		arg2 baseca.Update
	}{arg1, arg2})
	fake.recordInvocation("HandleTLSCAInit", []interface{}{arg1, arg2})
	fake.handleTLSCAInitMutex.Unlock()
	if fake.HandleTLSCAInitStub != nil {
		return fake.HandleTLSCAInitStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.handleTLSCAInitReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *InitializeIBPCA) HandleTLSCAInitCallCount() int {
	fake.handleTLSCAInitMutex.RLock()
	defer fake.handleTLSCAInitMutex.RUnlock()
	return len(fake.handleTLSCAInitArgsForCall)
}

func (fake *InitializeIBPCA) HandleTLSCAInitCalls(stub func(*v1beta1.IBPCA, baseca.Update) (*initializer.Response, error)) {
	fake.handleTLSCAInitMutex.Lock()
	defer fake.handleTLSCAInitMutex.Unlock()
	fake.HandleTLSCAInitStub = stub
}

func (fake *InitializeIBPCA) HandleTLSCAInitArgsForCall(i int) (*v1beta1.IBPCA, baseca.Update) {
	fake.handleTLSCAInitMutex.RLock()
	defer fake.handleTLSCAInitMutex.RUnlock()
	argsForCall := fake.handleTLSCAInitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *InitializeIBPCA) HandleTLSCAInitReturns(result1 *initializer.Response, result2 error) {
	fake.handleTLSCAInitMutex.Lock()
	defer fake.handleTLSCAInitMutex.Unlock()
	fake.HandleTLSCAInitStub = nil
	fake.handleTLSCAInitReturns = struct {
		result1 *initializer.Response
		result2 error
	}{result1, result2}
}

func (fake *InitializeIBPCA) HandleTLSCAInitReturnsOnCall(i int, result1 *initializer.Response, result2 error) {
	fake.handleTLSCAInitMutex.Lock()
	defer fake.handleTLSCAInitMutex.Unlock()
	fake.HandleTLSCAInitStub = nil
	if fake.handleTLSCAInitReturnsOnCall == nil {
		fake.handleTLSCAInitReturnsOnCall = make(map[int]struct {
			result1 *initializer.Response
			result2 error
		})
	}
	fake.handleTLSCAInitReturnsOnCall[i] = struct {
		result1 *initializer.Response
		result2 error
	}{result1, result2}
}

func (fake *InitializeIBPCA) ReadConfigMap(arg1 *v1beta1.IBPCA, arg2 string) (*v1.ConfigMap, error) {
	fake.readConfigMapMutex.Lock()
	ret, specificReturn := fake.readConfigMapReturnsOnCall[len(fake.readConfigMapArgsForCall)]
	fake.readConfigMapArgsForCall = append(fake.readConfigMapArgsForCall, struct {
		arg1 *v1beta1.IBPCA
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ReadConfigMap", []interface{}{arg1, arg2})
	fake.readConfigMapMutex.Unlock()
	if fake.ReadConfigMapStub != nil {
		return fake.ReadConfigMapStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.readConfigMapReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *InitializeIBPCA) ReadConfigMapCallCount() int {
	fake.readConfigMapMutex.RLock()
	defer fake.readConfigMapMutex.RUnlock()
	return len(fake.readConfigMapArgsForCall)
}

func (fake *InitializeIBPCA) ReadConfigMapCalls(stub func(*v1beta1.IBPCA, string) (*v1.ConfigMap, error)) {
	fake.readConfigMapMutex.Lock()
	defer fake.readConfigMapMutex.Unlock()
	fake.ReadConfigMapStub = stub
}

func (fake *InitializeIBPCA) ReadConfigMapArgsForCall(i int) (*v1beta1.IBPCA, string) {
	fake.readConfigMapMutex.RLock()
	defer fake.readConfigMapMutex.RUnlock()
	argsForCall := fake.readConfigMapArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *InitializeIBPCA) ReadConfigMapReturns(result1 *v1.ConfigMap, result2 error) {
	fake.readConfigMapMutex.Lock()
	defer fake.readConfigMapMutex.Unlock()
	fake.ReadConfigMapStub = nil
	fake.readConfigMapReturns = struct {
		result1 *v1.ConfigMap
		result2 error
	}{result1, result2}
}

func (fake *InitializeIBPCA) ReadConfigMapReturnsOnCall(i int, result1 *v1.ConfigMap, result2 error) {
	fake.readConfigMapMutex.Lock()
	defer fake.readConfigMapMutex.Unlock()
	fake.ReadConfigMapStub = nil
	if fake.readConfigMapReturnsOnCall == nil {
		fake.readConfigMapReturnsOnCall = make(map[int]struct {
			result1 *v1.ConfigMap
			result2 error
		})
	}
	fake.readConfigMapReturnsOnCall[i] = struct {
		result1 *v1.ConfigMap
		result2 error
	}{result1, result2}
}

func (fake *InitializeIBPCA) SyncDBConfig(arg1 *v1beta1.IBPCA) (*v1beta1.IBPCA, error) {
	fake.syncDBConfigMutex.Lock()
	ret, specificReturn := fake.syncDBConfigReturnsOnCall[len(fake.syncDBConfigArgsForCall)]
	fake.syncDBConfigArgsForCall = append(fake.syncDBConfigArgsForCall, struct {
		arg1 *v1beta1.IBPCA
	}{arg1})
	fake.recordInvocation("SyncDBConfig", []interface{}{arg1})
	fake.syncDBConfigMutex.Unlock()
	if fake.SyncDBConfigStub != nil {
		return fake.SyncDBConfigStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.syncDBConfigReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *InitializeIBPCA) SyncDBConfigCallCount() int {
	fake.syncDBConfigMutex.RLock()
	defer fake.syncDBConfigMutex.RUnlock()
	return len(fake.syncDBConfigArgsForCall)
}

func (fake *InitializeIBPCA) SyncDBConfigCalls(stub func(*v1beta1.IBPCA) (*v1beta1.IBPCA, error)) {
	fake.syncDBConfigMutex.Lock()
	defer fake.syncDBConfigMutex.Unlock()
	fake.SyncDBConfigStub = stub
}

func (fake *InitializeIBPCA) SyncDBConfigArgsForCall(i int) *v1beta1.IBPCA {
	fake.syncDBConfigMutex.RLock()
	defer fake.syncDBConfigMutex.RUnlock()
	argsForCall := fake.syncDBConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *InitializeIBPCA) SyncDBConfigReturns(result1 *v1beta1.IBPCA, result2 error) {
	fake.syncDBConfigMutex.Lock()
	defer fake.syncDBConfigMutex.Unlock()
	fake.SyncDBConfigStub = nil
	fake.syncDBConfigReturns = struct {
		result1 *v1beta1.IBPCA
		result2 error
	}{result1, result2}
}

func (fake *InitializeIBPCA) SyncDBConfigReturnsOnCall(i int, result1 *v1beta1.IBPCA, result2 error) {
	fake.syncDBConfigMutex.Lock()
	defer fake.syncDBConfigMutex.Unlock()
	fake.SyncDBConfigStub = nil
	if fake.syncDBConfigReturnsOnCall == nil {
		fake.syncDBConfigReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.IBPCA
			result2 error
		})
	}
	fake.syncDBConfigReturnsOnCall[i] = struct {
		result1 *v1beta1.IBPCA
		result2 error
	}{result1, result2}
}

func (fake *InitializeIBPCA) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOrUpdateConfigMapMutex.RLock()
	defer fake.createOrUpdateConfigMapMutex.RUnlock()
	fake.handleConfigResourcesMutex.RLock()
	defer fake.handleConfigResourcesMutex.RUnlock()
	fake.handleEnrollmentCAInitMutex.RLock()
	defer fake.handleEnrollmentCAInitMutex.RUnlock()
	fake.handleTLSCAInitMutex.RLock()
	defer fake.handleTLSCAInitMutex.RUnlock()
	fake.readConfigMapMutex.RLock()
	defer fake.readConfigMapMutex.RUnlock()
	fake.syncDBConfigMutex.RLock()
	defer fake.syncDBConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *InitializeIBPCA) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ baseca.InitializeIBPCA = new(InitializeIBPCA)
