// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	"time"

	baseorderer "github.com/IBM-Blockchain/fabric-operator/pkg/offering/base/orderer"
)

type NodeManager struct {
	GetNodeStub        func(int, map[string]*time.Timer, baseorderer.RestartManager) *baseorderer.Node
	getNodeMutex       sync.RWMutex
	getNodeArgsForCall []struct {
		arg1 int
		arg2 map[string]*time.Timer
		arg3 baseorderer.RestartManager
	}
	getNodeReturns struct {
		result1 *baseorderer.Node
	}
	getNodeReturnsOnCall map[int]struct {
		result1 *baseorderer.Node
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NodeManager) GetNode(arg1 int, arg2 map[string]*time.Timer, arg3 baseorderer.RestartManager) *baseorderer.Node {
	fake.getNodeMutex.Lock()
	ret, specificReturn := fake.getNodeReturnsOnCall[len(fake.getNodeArgsForCall)]
	fake.getNodeArgsForCall = append(fake.getNodeArgsForCall, struct {
		arg1 int
		arg2 map[string]*time.Timer
		arg3 baseorderer.RestartManager
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetNode", []interface{}{arg1, arg2, arg3})
	fake.getNodeMutex.Unlock()
	if fake.GetNodeStub != nil {
		return fake.GetNodeStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getNodeReturns
	return fakeReturns.result1
}

func (fake *NodeManager) GetNodeCallCount() int {
	fake.getNodeMutex.RLock()
	defer fake.getNodeMutex.RUnlock()
	return len(fake.getNodeArgsForCall)
}

func (fake *NodeManager) GetNodeCalls(stub func(int, map[string]*time.Timer, baseorderer.RestartManager) *baseorderer.Node) {
	fake.getNodeMutex.Lock()
	defer fake.getNodeMutex.Unlock()
	fake.GetNodeStub = stub
}

func (fake *NodeManager) GetNodeArgsForCall(i int) (int, map[string]*time.Timer, baseorderer.RestartManager) {
	fake.getNodeMutex.RLock()
	defer fake.getNodeMutex.RUnlock()
	argsForCall := fake.getNodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *NodeManager) GetNodeReturns(result1 *baseorderer.Node) {
	fake.getNodeMutex.Lock()
	defer fake.getNodeMutex.Unlock()
	fake.GetNodeStub = nil
	fake.getNodeReturns = struct {
		result1 *baseorderer.Node
	}{result1}
}

func (fake *NodeManager) GetNodeReturnsOnCall(i int, result1 *baseorderer.Node) {
	fake.getNodeMutex.Lock()
	defer fake.getNodeMutex.Unlock()
	fake.GetNodeStub = nil
	if fake.getNodeReturnsOnCall == nil {
		fake.getNodeReturnsOnCall = make(map[int]struct {
			result1 *baseorderer.Node
		})
	}
	fake.getNodeReturnsOnCall[i] = struct {
		result1 *baseorderer.Node
	}{result1}
}

func (fake *NodeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getNodeMutex.RLock()
	defer fake.getNodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *NodeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ baseorderer.NodeManager = new(NodeManager)
