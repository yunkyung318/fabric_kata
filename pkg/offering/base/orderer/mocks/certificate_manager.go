// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	"time"

	"github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	commona "github.com/IBM-Blockchain/fabric-operator/pkg/apis/common"
	"github.com/IBM-Blockchain/fabric-operator/pkg/certificate"
	"github.com/IBM-Blockchain/fabric-operator/pkg/initializer/common"
	baseorderer "github.com/IBM-Blockchain/fabric-operator/pkg/offering/base/orderer"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type CertificateManager struct {
	CheckCertificatesForExpireStub        func(v1.Object, int64) (v1beta1.IBPCRStatusType, string, error)
	checkCertificatesForExpireMutex       sync.RWMutex
	checkCertificatesForExpireArgsForCall []struct {
		arg1 v1.Object
		arg2 int64
	}
	checkCertificatesForExpireReturns struct {
		result1 v1beta1.IBPCRStatusType
		result2 string
		result3 error
	}
	checkCertificatesForExpireReturnsOnCall map[int]struct {
		result1 v1beta1.IBPCRStatusType
		result2 string
		result3 error
	}
	GetDurationToNextRenewalStub        func(common.SecretType, v1.Object, int64) (time.Duration, error)
	getDurationToNextRenewalMutex       sync.RWMutex
	getDurationToNextRenewalArgsForCall []struct {
		arg1 common.SecretType
		arg2 v1.Object
		arg3 int64
	}
	getDurationToNextRenewalReturns struct {
		result1 time.Duration
		result2 error
	}
	getDurationToNextRenewalReturnsOnCall map[int]struct {
		result1 time.Duration
		result2 error
	}
	GetSignCertStub        func(string, string) ([]byte, error)
	getSignCertMutex       sync.RWMutex
	getSignCertArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSignCertReturns struct {
		result1 []byte
		result2 error
	}
	getSignCertReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	RenewCertStub        func(common.SecretType, certificate.Instance, *v1beta1.EnrollmentSpec, *commona.BCCSP, string, bool, bool) error
	renewCertMutex       sync.RWMutex
	renewCertArgsForCall []struct {
		arg1 common.SecretType
		arg2 certificate.Instance
		arg3 *v1beta1.EnrollmentSpec
		arg4 *commona.BCCSP
		arg5 string
		arg6 bool
		arg7 bool
	}
	renewCertReturns struct {
		result1 error
	}
	renewCertReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CertificateManager) CheckCertificatesForExpire(arg1 v1.Object, arg2 int64) (v1beta1.IBPCRStatusType, string, error) {
	fake.checkCertificatesForExpireMutex.Lock()
	ret, specificReturn := fake.checkCertificatesForExpireReturnsOnCall[len(fake.checkCertificatesForExpireArgsForCall)]
	fake.checkCertificatesForExpireArgsForCall = append(fake.checkCertificatesForExpireArgsForCall, struct {
		arg1 v1.Object
		arg2 int64
	}{arg1, arg2})
	fake.recordInvocation("CheckCertificatesForExpire", []interface{}{arg1, arg2})
	fake.checkCertificatesForExpireMutex.Unlock()
	if fake.CheckCertificatesForExpireStub != nil {
		return fake.CheckCertificatesForExpireStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.checkCertificatesForExpireReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *CertificateManager) CheckCertificatesForExpireCallCount() int {
	fake.checkCertificatesForExpireMutex.RLock()
	defer fake.checkCertificatesForExpireMutex.RUnlock()
	return len(fake.checkCertificatesForExpireArgsForCall)
}

func (fake *CertificateManager) CheckCertificatesForExpireCalls(stub func(v1.Object, int64) (v1beta1.IBPCRStatusType, string, error)) {
	fake.checkCertificatesForExpireMutex.Lock()
	defer fake.checkCertificatesForExpireMutex.Unlock()
	fake.CheckCertificatesForExpireStub = stub
}

func (fake *CertificateManager) CheckCertificatesForExpireArgsForCall(i int) (v1.Object, int64) {
	fake.checkCertificatesForExpireMutex.RLock()
	defer fake.checkCertificatesForExpireMutex.RUnlock()
	argsForCall := fake.checkCertificatesForExpireArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CertificateManager) CheckCertificatesForExpireReturns(result1 v1beta1.IBPCRStatusType, result2 string, result3 error) {
	fake.checkCertificatesForExpireMutex.Lock()
	defer fake.checkCertificatesForExpireMutex.Unlock()
	fake.CheckCertificatesForExpireStub = nil
	fake.checkCertificatesForExpireReturns = struct {
		result1 v1beta1.IBPCRStatusType
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *CertificateManager) CheckCertificatesForExpireReturnsOnCall(i int, result1 v1beta1.IBPCRStatusType, result2 string, result3 error) {
	fake.checkCertificatesForExpireMutex.Lock()
	defer fake.checkCertificatesForExpireMutex.Unlock()
	fake.CheckCertificatesForExpireStub = nil
	if fake.checkCertificatesForExpireReturnsOnCall == nil {
		fake.checkCertificatesForExpireReturnsOnCall = make(map[int]struct {
			result1 v1beta1.IBPCRStatusType
			result2 string
			result3 error
		})
	}
	fake.checkCertificatesForExpireReturnsOnCall[i] = struct {
		result1 v1beta1.IBPCRStatusType
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *CertificateManager) GetDurationToNextRenewal(arg1 common.SecretType, arg2 v1.Object, arg3 int64) (time.Duration, error) {
	fake.getDurationToNextRenewalMutex.Lock()
	ret, specificReturn := fake.getDurationToNextRenewalReturnsOnCall[len(fake.getDurationToNextRenewalArgsForCall)]
	fake.getDurationToNextRenewalArgsForCall = append(fake.getDurationToNextRenewalArgsForCall, struct {
		arg1 common.SecretType
		arg2 v1.Object
		arg3 int64
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetDurationToNextRenewal", []interface{}{arg1, arg2, arg3})
	fake.getDurationToNextRenewalMutex.Unlock()
	if fake.GetDurationToNextRenewalStub != nil {
		return fake.GetDurationToNextRenewalStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDurationToNextRenewalReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CertificateManager) GetDurationToNextRenewalCallCount() int {
	fake.getDurationToNextRenewalMutex.RLock()
	defer fake.getDurationToNextRenewalMutex.RUnlock()
	return len(fake.getDurationToNextRenewalArgsForCall)
}

func (fake *CertificateManager) GetDurationToNextRenewalCalls(stub func(common.SecretType, v1.Object, int64) (time.Duration, error)) {
	fake.getDurationToNextRenewalMutex.Lock()
	defer fake.getDurationToNextRenewalMutex.Unlock()
	fake.GetDurationToNextRenewalStub = stub
}

func (fake *CertificateManager) GetDurationToNextRenewalArgsForCall(i int) (common.SecretType, v1.Object, int64) {
	fake.getDurationToNextRenewalMutex.RLock()
	defer fake.getDurationToNextRenewalMutex.RUnlock()
	argsForCall := fake.getDurationToNextRenewalArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CertificateManager) GetDurationToNextRenewalReturns(result1 time.Duration, result2 error) {
	fake.getDurationToNextRenewalMutex.Lock()
	defer fake.getDurationToNextRenewalMutex.Unlock()
	fake.GetDurationToNextRenewalStub = nil
	fake.getDurationToNextRenewalReturns = struct {
		result1 time.Duration
		result2 error
	}{result1, result2}
}

func (fake *CertificateManager) GetDurationToNextRenewalReturnsOnCall(i int, result1 time.Duration, result2 error) {
	fake.getDurationToNextRenewalMutex.Lock()
	defer fake.getDurationToNextRenewalMutex.Unlock()
	fake.GetDurationToNextRenewalStub = nil
	if fake.getDurationToNextRenewalReturnsOnCall == nil {
		fake.getDurationToNextRenewalReturnsOnCall = make(map[int]struct {
			result1 time.Duration
			result2 error
		})
	}
	fake.getDurationToNextRenewalReturnsOnCall[i] = struct {
		result1 time.Duration
		result2 error
	}{result1, result2}
}

func (fake *CertificateManager) GetSignCert(arg1 string, arg2 string) ([]byte, error) {
	fake.getSignCertMutex.Lock()
	ret, specificReturn := fake.getSignCertReturnsOnCall[len(fake.getSignCertArgsForCall)]
	fake.getSignCertArgsForCall = append(fake.getSignCertArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetSignCert", []interface{}{arg1, arg2})
	fake.getSignCertMutex.Unlock()
	if fake.GetSignCertStub != nil {
		return fake.GetSignCertStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSignCertReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CertificateManager) GetSignCertCallCount() int {
	fake.getSignCertMutex.RLock()
	defer fake.getSignCertMutex.RUnlock()
	return len(fake.getSignCertArgsForCall)
}

func (fake *CertificateManager) GetSignCertCalls(stub func(string, string) ([]byte, error)) {
	fake.getSignCertMutex.Lock()
	defer fake.getSignCertMutex.Unlock()
	fake.GetSignCertStub = stub
}

func (fake *CertificateManager) GetSignCertArgsForCall(i int) (string, string) {
	fake.getSignCertMutex.RLock()
	defer fake.getSignCertMutex.RUnlock()
	argsForCall := fake.getSignCertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CertificateManager) GetSignCertReturns(result1 []byte, result2 error) {
	fake.getSignCertMutex.Lock()
	defer fake.getSignCertMutex.Unlock()
	fake.GetSignCertStub = nil
	fake.getSignCertReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CertificateManager) GetSignCertReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getSignCertMutex.Lock()
	defer fake.getSignCertMutex.Unlock()
	fake.GetSignCertStub = nil
	if fake.getSignCertReturnsOnCall == nil {
		fake.getSignCertReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getSignCertReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CertificateManager) RenewCert(arg1 common.SecretType, arg2 certificate.Instance, arg3 *v1beta1.EnrollmentSpec, arg4 *commona.BCCSP, arg5 string, arg6 bool, arg7 bool) error {
	fake.renewCertMutex.Lock()
	ret, specificReturn := fake.renewCertReturnsOnCall[len(fake.renewCertArgsForCall)]
	fake.renewCertArgsForCall = append(fake.renewCertArgsForCall, struct {
		arg1 common.SecretType
		arg2 certificate.Instance
		arg3 *v1beta1.EnrollmentSpec
		arg4 *commona.BCCSP
		arg5 string
		arg6 bool
		arg7 bool
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.recordInvocation("RenewCert", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.renewCertMutex.Unlock()
	if fake.RenewCertStub != nil {
		return fake.RenewCertStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.renewCertReturns
	return fakeReturns.result1
}

func (fake *CertificateManager) RenewCertCallCount() int {
	fake.renewCertMutex.RLock()
	defer fake.renewCertMutex.RUnlock()
	return len(fake.renewCertArgsForCall)
}

func (fake *CertificateManager) RenewCertCalls(stub func(common.SecretType, certificate.Instance, *v1beta1.EnrollmentSpec, *commona.BCCSP, string, bool, bool) error) {
	fake.renewCertMutex.Lock()
	defer fake.renewCertMutex.Unlock()
	fake.RenewCertStub = stub
}

func (fake *CertificateManager) RenewCertArgsForCall(i int) (common.SecretType, certificate.Instance, *v1beta1.EnrollmentSpec, *commona.BCCSP, string, bool, bool) {
	fake.renewCertMutex.RLock()
	defer fake.renewCertMutex.RUnlock()
	argsForCall := fake.renewCertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *CertificateManager) RenewCertReturns(result1 error) {
	fake.renewCertMutex.Lock()
	defer fake.renewCertMutex.Unlock()
	fake.RenewCertStub = nil
	fake.renewCertReturns = struct {
		result1 error
	}{result1}
}

func (fake *CertificateManager) RenewCertReturnsOnCall(i int, result1 error) {
	fake.renewCertMutex.Lock()
	defer fake.renewCertMutex.Unlock()
	fake.RenewCertStub = nil
	if fake.renewCertReturnsOnCall == nil {
		fake.renewCertReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renewCertReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CertificateManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkCertificatesForExpireMutex.RLock()
	defer fake.checkCertificatesForExpireMutex.RUnlock()
	fake.getDurationToNextRenewalMutex.RLock()
	defer fake.getDurationToNextRenewalMutex.RUnlock()
	fake.getSignCertMutex.RLock()
	defer fake.getSignCertMutex.RUnlock()
	fake.renewCertMutex.RLock()
	defer fake.renewCertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CertificateManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ baseorderer.CertificateManager = new(CertificateManager)
