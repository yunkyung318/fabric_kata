// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/pkg/offering/common/reconcilechecks"
	"github.com/IBM-Blockchain/fabric-operator/pkg/offering/common/reconcilechecks/images"
)

type Image struct {
	SetDefaultsStub        func(images.Instance) error
	setDefaultsMutex       sync.RWMutex
	setDefaultsArgsForCall []struct {
		arg1 images.Instance
	}
	setDefaultsReturns struct {
		result1 error
	}
	setDefaultsReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateRequiredStub        func(images.Update) bool
	updateRequiredMutex       sync.RWMutex
	updateRequiredArgsForCall []struct {
		arg1 images.Update
	}
	updateRequiredReturns struct {
		result1 bool
	}
	updateRequiredReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Image) SetDefaults(arg1 images.Instance) error {
	fake.setDefaultsMutex.Lock()
	ret, specificReturn := fake.setDefaultsReturnsOnCall[len(fake.setDefaultsArgsForCall)]
	fake.setDefaultsArgsForCall = append(fake.setDefaultsArgsForCall, struct {
		arg1 images.Instance
	}{arg1})
	fake.recordInvocation("SetDefaults", []interface{}{arg1})
	fake.setDefaultsMutex.Unlock()
	if fake.SetDefaultsStub != nil {
		return fake.SetDefaultsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setDefaultsReturns
	return fakeReturns.result1
}

func (fake *Image) SetDefaultsCallCount() int {
	fake.setDefaultsMutex.RLock()
	defer fake.setDefaultsMutex.RUnlock()
	return len(fake.setDefaultsArgsForCall)
}

func (fake *Image) SetDefaultsCalls(stub func(images.Instance) error) {
	fake.setDefaultsMutex.Lock()
	defer fake.setDefaultsMutex.Unlock()
	fake.SetDefaultsStub = stub
}

func (fake *Image) SetDefaultsArgsForCall(i int) images.Instance {
	fake.setDefaultsMutex.RLock()
	defer fake.setDefaultsMutex.RUnlock()
	argsForCall := fake.setDefaultsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Image) SetDefaultsReturns(result1 error) {
	fake.setDefaultsMutex.Lock()
	defer fake.setDefaultsMutex.Unlock()
	fake.SetDefaultsStub = nil
	fake.setDefaultsReturns = struct {
		result1 error
	}{result1}
}

func (fake *Image) SetDefaultsReturnsOnCall(i int, result1 error) {
	fake.setDefaultsMutex.Lock()
	defer fake.setDefaultsMutex.Unlock()
	fake.SetDefaultsStub = nil
	if fake.setDefaultsReturnsOnCall == nil {
		fake.setDefaultsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setDefaultsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Image) UpdateRequired(arg1 images.Update) bool {
	fake.updateRequiredMutex.Lock()
	ret, specificReturn := fake.updateRequiredReturnsOnCall[len(fake.updateRequiredArgsForCall)]
	fake.updateRequiredArgsForCall = append(fake.updateRequiredArgsForCall, struct {
		arg1 images.Update
	}{arg1})
	fake.recordInvocation("UpdateRequired", []interface{}{arg1})
	fake.updateRequiredMutex.Unlock()
	if fake.UpdateRequiredStub != nil {
		return fake.UpdateRequiredStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateRequiredReturns
	return fakeReturns.result1
}

func (fake *Image) UpdateRequiredCallCount() int {
	fake.updateRequiredMutex.RLock()
	defer fake.updateRequiredMutex.RUnlock()
	return len(fake.updateRequiredArgsForCall)
}

func (fake *Image) UpdateRequiredCalls(stub func(images.Update) bool) {
	fake.updateRequiredMutex.Lock()
	defer fake.updateRequiredMutex.Unlock()
	fake.UpdateRequiredStub = stub
}

func (fake *Image) UpdateRequiredArgsForCall(i int) images.Update {
	fake.updateRequiredMutex.RLock()
	defer fake.updateRequiredMutex.RUnlock()
	argsForCall := fake.updateRequiredArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Image) UpdateRequiredReturns(result1 bool) {
	fake.updateRequiredMutex.Lock()
	defer fake.updateRequiredMutex.Unlock()
	fake.UpdateRequiredStub = nil
	fake.updateRequiredReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Image) UpdateRequiredReturnsOnCall(i int, result1 bool) {
	fake.updateRequiredMutex.Lock()
	defer fake.updateRequiredMutex.Unlock()
	fake.UpdateRequiredStub = nil
	if fake.updateRequiredReturnsOnCall == nil {
		fake.updateRequiredReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.updateRequiredReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Image) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setDefaultsMutex.RLock()
	defer fake.setDefaultsMutex.RUnlock()
	fake.updateRequiredMutex.RLock()
	defer fake.updateRequiredMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Image) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconcilechecks.Image = new(Image)
