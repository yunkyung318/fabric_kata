// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/pkg/offering/common/reconcilechecks"
	"github.com/IBM-Blockchain/fabric-operator/pkg/offering/common/reconcilechecks/images"
)

type Version struct {
	NormalizeStub        func(images.FabricVersionInstance) string
	normalizeMutex       sync.RWMutex
	normalizeArgsForCall []struct {
		arg1 images.FabricVersionInstance
	}
	normalizeReturns struct {
		result1 string
	}
	normalizeReturnsOnCall map[int]struct {
		result1 string
	}
	ValidateStub        func(images.FabricVersionInstance) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 images.FabricVersionInstance
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Version) Normalize(arg1 images.FabricVersionInstance) string {
	fake.normalizeMutex.Lock()
	ret, specificReturn := fake.normalizeReturnsOnCall[len(fake.normalizeArgsForCall)]
	fake.normalizeArgsForCall = append(fake.normalizeArgsForCall, struct {
		arg1 images.FabricVersionInstance
	}{arg1})
	fake.recordInvocation("Normalize", []interface{}{arg1})
	fake.normalizeMutex.Unlock()
	if fake.NormalizeStub != nil {
		return fake.NormalizeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.normalizeReturns
	return fakeReturns.result1
}

func (fake *Version) NormalizeCallCount() int {
	fake.normalizeMutex.RLock()
	defer fake.normalizeMutex.RUnlock()
	return len(fake.normalizeArgsForCall)
}

func (fake *Version) NormalizeCalls(stub func(images.FabricVersionInstance) string) {
	fake.normalizeMutex.Lock()
	defer fake.normalizeMutex.Unlock()
	fake.NormalizeStub = stub
}

func (fake *Version) NormalizeArgsForCall(i int) images.FabricVersionInstance {
	fake.normalizeMutex.RLock()
	defer fake.normalizeMutex.RUnlock()
	argsForCall := fake.normalizeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Version) NormalizeReturns(result1 string) {
	fake.normalizeMutex.Lock()
	defer fake.normalizeMutex.Unlock()
	fake.NormalizeStub = nil
	fake.normalizeReturns = struct {
		result1 string
	}{result1}
}

func (fake *Version) NormalizeReturnsOnCall(i int, result1 string) {
	fake.normalizeMutex.Lock()
	defer fake.normalizeMutex.Unlock()
	fake.NormalizeStub = nil
	if fake.normalizeReturnsOnCall == nil {
		fake.normalizeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.normalizeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *Version) Validate(arg1 images.FabricVersionInstance) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 images.FabricVersionInstance
	}{arg1})
	fake.recordInvocation("Validate", []interface{}{arg1})
	fake.validateMutex.Unlock()
	if fake.ValidateStub != nil {
		return fake.ValidateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.validateReturns
	return fakeReturns.result1
}

func (fake *Version) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *Version) ValidateCalls(stub func(images.FabricVersionInstance) error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *Version) ValidateArgsForCall(i int) images.FabricVersionInstance {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Version) ValidateReturns(result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *Version) ValidateReturnsOnCall(i int, result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Version) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.normalizeMutex.RLock()
	defer fake.normalizeMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Version) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconcilechecks.Version = new(Version)
