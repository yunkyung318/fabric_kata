// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/pkg/offering/common/reconcilechecks/images"
)

type FabricVersionInstance struct {
	GetFabricVersionStub        func() string
	getFabricVersionMutex       sync.RWMutex
	getFabricVersionArgsForCall []struct {
	}
	getFabricVersionReturns struct {
		result1 string
	}
	getFabricVersionReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FabricVersionInstance) GetFabricVersion() string {
	fake.getFabricVersionMutex.Lock()
	ret, specificReturn := fake.getFabricVersionReturnsOnCall[len(fake.getFabricVersionArgsForCall)]
	fake.getFabricVersionArgsForCall = append(fake.getFabricVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("GetFabricVersion", []interface{}{})
	fake.getFabricVersionMutex.Unlock()
	if fake.GetFabricVersionStub != nil {
		return fake.GetFabricVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getFabricVersionReturns
	return fakeReturns.result1
}

func (fake *FabricVersionInstance) GetFabricVersionCallCount() int {
	fake.getFabricVersionMutex.RLock()
	defer fake.getFabricVersionMutex.RUnlock()
	return len(fake.getFabricVersionArgsForCall)
}

func (fake *FabricVersionInstance) GetFabricVersionCalls(stub func() string) {
	fake.getFabricVersionMutex.Lock()
	defer fake.getFabricVersionMutex.Unlock()
	fake.GetFabricVersionStub = stub
}

func (fake *FabricVersionInstance) GetFabricVersionReturns(result1 string) {
	fake.getFabricVersionMutex.Lock()
	defer fake.getFabricVersionMutex.Unlock()
	fake.GetFabricVersionStub = nil
	fake.getFabricVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FabricVersionInstance) GetFabricVersionReturnsOnCall(i int, result1 string) {
	fake.getFabricVersionMutex.Lock()
	defer fake.getFabricVersionMutex.Unlock()
	fake.GetFabricVersionStub = nil
	if fake.getFabricVersionReturnsOnCall == nil {
		fake.getFabricVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getFabricVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FabricVersionInstance) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFabricVersionMutex.RLock()
	defer fake.getFabricVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FabricVersionInstance) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ images.FabricVersionInstance = new(FabricVersionInstance)
